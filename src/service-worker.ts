/* eslint-disable prefer-destructuring */
/* eslint-disable no-restricted-globals,@typescript-eslint/no-explicit-any */
import { files, shell, routes } from "@sapper/service-worker"

const timestamp = process.env.SAPPER_TIMESTAMP

const ASSETS = `cache${timestamp}`

const TIME_HEADER = "x-sw-time"

declare const self: ServiceWorkerGlobalScope

// `shell` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const toCache = (shell as string[]).concat(files as string[])
const cached = new Set(toCache)

function timedClone(response: Response): Response {
  const xTime = new Date().getTime()
  const newHeaders = new Headers(response.headers)
  newHeaders.append(TIME_HEADER, `${xTime}`)

  return new Response(response.clone().body, {
    status: response.status,
    statusText: response.statusText,
    headers: newHeaders,
  })
}

function getTime(response: Response): number {
  return parseInt(response.headers.get(TIME_HEADER) || "0", 10)
}

const decoder = new TextDecoder()

async function getBody(response: Response): Promise<string> {
  const body = await response.body?.getReader().read()
  return decoder.decode(body?.value)
}

self.addEventListener("install", <EventType extends ExtendableEvent>(event: EventType) => {
  event.waitUntil(
    caches
      .open(ASSETS)
      .then(cache => cache.addAll(toCache))
      .then(async () => {
        const clients = await self.clients.matchAll()
        if (clients.length < 2) self.skipWaiting()
      }),
  )
})

self.addEventListener("activate", <EventType extends ExtendableEvent>(event: EventType) => {
  event.waitUntil(
    caches.keys().then(async keys => {
      // delete old caches
      for (const key of keys) { // eslint-disable-line no-restricted-syntax
        if (key !== ASSETS) await caches.delete(key) // eslint-disable-line no-await-in-loop
      }

      (self as any as {clients: Clients}).clients.claim()
    }),
  )
})

self.addEventListener("fetch", <EventType extends FetchEvent>(event: EventType) => {
  if (event.request.method !== "GET" || event.request.headers.has("range")) return
  if (event.request.url.match(/firestore.googleapis.com.+channel/)) return

  const url = new URL(event.request.url)

  // don't try to handle e.g. data: URIs
  if (!url.protocol.startsWith("http")) return

  // ignore dev server requests
  if (url.hostname === self.location.hostname && url.port !== self.location.port) return

  // for pages, you might want to serve a shell `service-worker-index.html` file,
  // which Sapper has generated for you. It's not right for every
  // app, but if it's right for yours then uncomment this section
  if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
    event.respondWith(
      caches
        .open(ASSETS)
        .then(async cache => {
          const cachedResponse = await cache.match(event.request)
          const clonedCachedResponse = cachedResponse?.clone()

          if (cachedResponse) {
            const diff = new Date().getTime() - getTime(cachedResponse)
            if (diff < 1000) return cachedResponse
          }

          const fetchRequest = fetch(event.request)
          fetchRequest.then(async response => {
            const clone = timedClone(response)
            const secondClone = clone.clone()
            await cache.put(event.request, clone)
            if (event.request.mode !== "navigate") return
            if (clonedCachedResponse) {
              const diff = getTime(clone) - getTime(clonedCachedResponse)
              const clients = await self.clients.matchAll()

              if (clients.length < 2 && diff > 2000) {
                const pattern = /(__SAPPER__={[\s\S]+?};)if/
                let oldBody = await getBody(clonedCachedResponse)
                let newBody = await getBody(secondClone)
                const oldMatch = oldBody.match(pattern)
                const newMatch = newBody.match(pattern)
                if (!oldMatch || !newMatch) return
                oldBody = oldBody.replace(pattern, "")
                newBody = newBody.replace(pattern, "")
                if (newBody !== oldBody) clients[0].postMessage("refresh")
                else if (newMatch[1] !== oldMatch[1]) {
                  setTimeout(() => clients[0].postMessage(newMatch[1]), 500)
                }
              }
            }
          })

          return cachedResponse || fetchRequest
        }),
    )
    return
  }

  // always serve static files and bundler-generated assets from cache
  if (url.host === self.location.host && cached.has(url.pathname)) {
    event.respondWith(caches.match(event.request) as Promise<Response>)
    return
  }

  if (event.request.cache === "only-if-cached") return

  // for everything else, try the network first, falling back to
  // cache if the user is offline. (If the pages never change, you
  // might prefer a cache-first approach to a network-first one.)
  event.respondWith(
    caches
      .open(`offline${timestamp}`)
      .then(async cache => {
        try {
          const response = await fetch(event.request)
          cache.put(event.request, response.clone())
          return response
        } catch (err) {
          const response = await cache.match(event.request)
          if (response) return response

          throw err
        }
      }),
  )
})

self.addEventListener("message", message => {
  if (message.data === "skipWaiting") self.skipWaiting()
})
